/*=========================================================================

  Program:   Visualization Toolkit
  Module:    ImageAccumulate.cxx

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
#include "vtkAssembly.h"
#include "vtkAxesActor.h"
#include "vtkColorTransferFunction.h"
#include "vtkDataSetAttributes.h"
#include "vtkImageData.h"
#include "vtkImageOcclusionSpectrum.h"
#include "vtkImageReader2.h"
#include "vtkInteractorStyleTrackballCamera.h"
#include "vtkLODActor.h"
#include "vtkOutlineFilter.h"
#include "vtkPiecewiseFunction.h"
#include "vtkPolyDataMapper.h"
#include "vtkProperty.h"
#include "vtkRenderer.h"
#include "vtkRenderWindow.h"
#include "vtkRenderWindowInteractor.h"
#include "vtkSmartPointer.h"
#include "vtkVolume.h"
#include "vtkVolumeProperty.h"
#include "vtkVolumeRayCastCompositeFunction.h"
#include "vtkVolumeRayCastMapper.h"
#include "vtkVolumeRayCastMIPFunction.h"
#include "vtkTestUtilities.h"

#define vsptype(type)   vtkSmartPointer<vtk##type>
#define vsp(type, name) vsptype(type) name = vsptype(type)::New()

double const opacity [256][3] =
{
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0.0104167,0.0104167,0.0104167,
  0.0208333,0.0208333,0.0208333,
  0.03125,0.03125,0.03125,
  0.0416666,0.0416666,0.0416666,
  0.0624999,0.0624999,0.0624999,
  0.0711805,0.0711805,0.0711805,
  0.0798611,0.0798611,0.0798611,
  0.0885416,0.0885416,0.0885416,
  0.0972222,0.0972222,0.0972222,
  0.105903,0.105903,0.105903,
  0.114583,0.114583,0.114583,
  0.123264,0.123264,0.123264,
  0.140625,0.140625,0.140625,
  0.150391,0.150391,0.150391,
  0.160156,0.160156,0.160156,
  0.169922,0.169922,0.169922,
  0.179687,0.179687,0.179687,
  0.189453,0.189453,0.189453,
  0.199219,0.199219,0.199219,
  0.21875,0.21875,0.21875,
  0.228516,0.228516,0.228516,
  0.238281,0.238281,0.238281,
  0.248047,0.248047,0.248047,
  0.257812,0.257812,0.257812,
  0.267578,0.267578,0.267578,
  0.277344,0.277344,0.277344,
  0.287109,0.287109,0.287109,
  0.296875,0.296875,0.296875,
  0.316406,0.316406,0.316406,
  0.324219,0.324219,0.324219,
  0.332031,0.332031,0.332031,
  0.339844,0.339844,0.339844,
  0.355469,0.355469,0.355469,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0.000781238,0.000781238,0.000781238,
  0.00117186,0.00117186,0.00117186,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0,0,0,
  0.00683593,0.00683593,0.00683593,
  0.0136719,0.0136719,0.0136719,
  0.0205078,0.0205078,0.0205078,
  0.0273437,0.0273437,0.0273437,
  0.0341797,0.0341797,0.0341797,
  0.0410156,0.0410156,0.0410156,
  0.0478515,0.0478515,0.0478515,
  0.0546875,0.0546875,0.0546875,
  0.0615234,0.0615234,0.0615234,
  0.0683593,0.0683593,0.0683593,
  0.0820312,0.0820312,0.0820312,
  0.092548,0.092548,0.092548,
  0.103065,0.103065,0.103065,
  0.113582,0.113582,0.113582,
  0.124098,0.124098,0.124098,
  0.134615,0.134615,0.134615,
  0.145132,0.145132,0.145132,
  0.155649,0.155649,0.155649,
  0.166166,0.166166,0.166166,
  0.176683,0.176683,0.176683,
  0.187199,0.187199,0.187199,
  0.197716,0.197716,0.197716,
  0.21875,0.21875,0.21875,
  0.228516,0.228516,0.228516,
  0.238281,0.238281,0.238281,
  0.248047,0.248047,0.248047,
  0.257812,0.257812,0.257812,
  0.267578,0.267578,0.267578,
  0.277344,0.277344,0.277344,
  0.287109,0.287109,0.287109,
  0.296875,0.296875,0.296875,
  0.306641,0.306641,0.306641,
  0.316406,0.316406,0.316406,
  0.326172,0.326172,0.326172,
  0.335937,0.335937,0.335937,
  0.355469,0.355469,0.355469,
  0.368024,0.368024,0.368024,
  0.38058,0.38058,0.38058,
  0.393136,0.393136,0.393136,
  0.405692,0.405692,0.405692,
  0.418248,0.418248,0.418248,
  0.430804,0.430804,0.430804,
  0.443359,0.443359,0.443359,
  0.455915,0.455915,0.455915,
  0.468471,0.468471,0.468471,
  0.481027,0.481027,0.481027,
  0.493583,0.493583,0.493583,
  0.506138,0.506138,0.506138,
  0.53125,0.53125,0.53125,
  0.545455,0.545455,0.545455,
  0.559659,0.559659,0.559659,
  0.573864,0.573864,0.573864,
  0.588068,0.588068,0.588068,
  0.602273,0.602273,0.602273,
  0.616477,0.616477,0.616477,
  0.630682,0.630682,0.630682,
  0.644886,0.644886,0.644886,
  0.659091,0.659091,0.659091,
  0.6875,0.6875,0.6875,
  0.70459,0.70459,0.70459,
  0.72168,0.72168,0.72168,
  0.738769,0.738769,0.738769,
  0.755859,0.755859,0.755859,
  0.772949,0.772949,0.772949,
  0.790039,0.790039,0.790039,
  0.824219,0.824219,0.824219,
  0.847656,0.847656,0.847656,
  0.871094,0.871094,0.871094,
  0.894531,0.894531,0.894531,
  0.917969,0.917969,0.917969,
  0.980469,0.980469,0.980469,
};

double const color [256][3] =
{
  0,0.370433,0.0961542,
  0.0230175,0.388817,0.158591,
  0.0356565,0.383734,0.182236,
  0.0657314,0.390465,0.332548,
  0.0677657,0.309034,0.356597,
  0.0769336,0.240495,0.305775,
  0.0934747,0.173709,0.287987,
  0.100084,0.148678,0.236671,
  0.129875,0.128439,0.266524,
  0.190385,0.148426,0.292549,
  0.211067,0.153152,0.304738,
  0.257738,0.168585,0.311797,
  0.33126,0.206093,0.363462,
  0.375848,0.217844,0.386532,
  0.333621,0.22756,0.39377,
  0.305822,0.245077,0.453955,
  0.311473,0.289859,0.516805,
  0.296421,0.305464,0.528183,
  0.319693,0.31942,0.544263,
  0.341001,0.343305,0.611709,
  0.421271,0.357949,0.653674,
  0.472475,0.343325,0.625581,
  0.501827,0.292522,0.579001,
  0.570094,0.305825,0.632329,
  0.551733,0.27931,0.672596,
  0.423103,0.246622,0.68646,
  0.264367,0.211517,0.648237,
  0.203771,0.259199,0.662975,
  0.199569,0.403471,0.669917,
  0.178099,0.414606,0.672976,
  0.186799,0.574545,0.690559,
  0.213517,0.645424,0.768845,
  0.225466,0.743793,0.828854,
  0.236576,0.763506,0.86254,
  0.260302,0.842088,0.855196,
  0.302766,0.878916,0.868514,
  0.290925,0.873192,0.919251,
  0.32955,0.843029,0.95035,
  0.323059,0.788309,0.967102,
  0.294075,0.989174,0.963268,
  0.247411,0.974372,0.767189,
  0.211375,0.941648,0.719524,
  0.172929,0.9152,0.697568,
  0.214175,0.909288,0.601925,
  0.223904,0.894778,0.454569,
  0.23361,0.897014,0.367407,
  0.266517,0.913063,0.429111,
  0.268573,0.908659,0.407007,
  0.257002,0.888741,0.372285,
  0.242837,0.844792,0.287298,
  0.218143,0.753252,0.193289,
  0.189867,0.714047,0.175025,
  0.148604,0.665425,0.312431,
  0.135363,0.657378,0.218728,
  0.150704,0.633465,0.228529,
  0.179878,0.58739,0.135787,
  0.151111,0.569073,0.115553,
  0.0852342,0.559849,0.160527,
  0.0493882,0.551376,0.215878,
  0.0337473,0.558404,0.350229,
  0.0339983,0.548603,0.365323,
  0.0369468,0.51408,0.468011,
  0.0589403,0.389518,0.505287,
  0.0652864,0.277443,0.497041,
  0.088163,0.278127,0.462214,
  0.0795157,0.127857,0.431489,
  0.137467,0.0672999,0.424797,
  0.176886,0.0725844,0.398373,
  0.220372,0.0608178,0.351017,
  0.324947,0.0753584,0.39591,
  0.48686,0.100677,0.424342,
  0.56193,0.148693,0.475274,
  0.614884,0.195604,0.437783,
  0.626064,0.215406,0.439734,
  0.642015,0.227722,0.514424,
  0.604654,0.214291,0.443962,
  0.550857,0.197527,0.466609,
  0.585117,0.201802,0.465412,
  0.576746,0.180075,0.367438,
  0.570587,0.165553,0.318455,
  0.560319,0.153642,0.388253,
  0.571144,0.137318,0.259084,
  0.629527,0.166654,0.183736,
  0.646478,0.182721,0.267099,
  0.671102,0.191749,0.338715,
  0.715631,0.221406,0.395599,
  0.751063,0.248453,0.357172,
  0.752284,0.244532,0.268806,
  0.775288,0.274078,0.274078,
  0.803387,0.300875,0.378118,
  0.838041,0.347966,0.487503,
  0.883733,0.363014,0.49901,
  0.906487,0.332325,0.55513,
  0.87407,0.303692,0.629234,
  0.83562,0.313715,0.652616,
  0.83596,0.281574,0.710719,
  0.804709,0.21378,0.827969,
  0.748521,0.193475,0.846866,
  0.77264,0.166289,0.785169,
  0.779887,0.171028,0.651661,
  0.791499,0.139451,0.645598,
  0.790094,0.114036,0.574538,
  0.751097,0.1164,0.426624,
  0.809968,0.19023,0.403075,
  0.869041,0.277168,0.527608,
  0.865153,0.305626,0.670336,
  0.854704,0.310256,0.65725,
  0.871614,0.291825,0.630918,
  0.865054,0.308799,0.638421,
  0.882199,0.291507,0.663463,
  0.853072,0.258817,0.595728,
  0.819529,0.253394,0.608907,
  0.812382,0.242267,0.661716,
  0.781632,0.254452,0.526092,
  0.759518,0.301486,0.539753,
  0.78838,0.346265,0.615356,
  0.74266,0.40213,0.760975,
  0.671588,0.467535,0.775681,
  0.623611,0.526291,0.754547,
  0.595449,0.489633,0.694173,
  0.593541,0.447502,0.638759,
  0.503545,0.385983,0.574609,
  0.482399,0.390621,0.586208,
  0.432371,0.397886,0.582386,
  0.44551,0.449528,0.658541,
  0.471563,0.50437,0.729897,
  0.447284,0.496351,0.755632,
  0.392438,0.541631,0.717598,
  0.327486,0.496176,0.721296,
  0.294675,0.489356,0.665311,
  0.245062,0.416053,0.609959,
  0.284732,0.459963,0.658838,
  0.293885,0.537128,0.719949,
  0.275519,0.557064,0.762489,
  0.273817,0.474108,0.747651,
  0.251245,0.50552,0.680932,
  0.246467,0.592576,0.610622,
  0.228944,0.566542,0.492102,
  0.24156,0.542632,0.392006,
  0.276214,0.577029,0.407477,
  0.32219,0.619365,0.468321,
  0.392623,0.676403,0.563727,
  0.439714,0.718765,0.587227,
  0.423892,0.750953,0.623452,
  0.392864,0.750303,0.719244,
  0.370214,0.720826,0.688435,
  0.355127,0.715157,0.698713,
  0.377445,0.679424,0.732345,
  0.385153,0.651079,0.742418,
  0.440672,0.700271,0.798213,
  0.507695,0.718913,0.804764,
  0.526509,0.742993,0.820763,
  0.486483,0.798917,0.811865,
  0.501035,0.810675,0.747659,
  0.488617,0.761273,0.573558,
  0.511037,0.758275,0.586047,
  0.500208,0.758242,0.659785,
  0.477173,0.737323,0.722183,
  0.468311,0.709163,0.733103,
  0.464889,0.699696,0.718316,
  0.410132,0.673903,0.709391,
  0.372672,0.629089,0.694721,
  0.350832,0.565625,0.762514,
  0.288079,0.395162,0.753954,
  0.251304,0.245058,0.742154,
  0.287359,0.228696,0.741501,
  0.365901,0.197963,0.740297,
  0.480873,0.18636,0.763197,
  0.603759,0.207533,0.780096,
  0.646135,0.212612,0.771657,
  0.613805,0.182937,0.812592,
  0.510068,0.166154,0.80576,
  0.680379,0.184412,0.842361,
  0.765165,0.179155,0.876715,
  0.83685,0.163765,0.890777,
  0.784421,0.115532,0.892694,
  0.618475,0.0984405,0.912112,
  0.0844307,0.0599505,0.958663,
  0.0741007,0.234175,0.951077,
  0.098649,0.570783,0.966042,
  0.0675192,0.667127,0.986058,
  0.0702802,0.579836,0.996342,
  0.100084,0.754238,1,
  0.110954,0.655475,0.997515,
  0.128309,0.79105,0.964002,
  0.137051,0.657975,0.909762,
  0.124433,0.625359,0.888776,
  0.120487,0.689468,0.905051,
  0.146902,0.644484,0.925408,
  0.143108,0.543352,0.964989,
  0.137497,0.397724,0.946489,
  0.140507,0.325686,0.904526,
  0.236036,0.654103,0.886954,
  0.284817,0.843432,0.879307,
  0.294338,0.805971,0.583562,
  0.297889,0.781412,0.428174,
  0.346045,0.766373,0.475172,
  0.360595,0.720975,0.486241,
  0.38035,0.709941,0.573185,
  0.399048,0.709601,0.689429,
  0.394985,0.61597,0.564427,
  0.394106,0.564789,0.522467,
  0.368553,0.502147,0.449159,
  0.349332,0.450816,0.425286,
  0.328376,0.424279,0.410724,
  0.324494,0.427789,0.442158,
  0.323031,0.430003,0.459074,
  0.292726,0.387249,0.446274,
  0.252001,0.364993,0.407563,
  0.229409,0.422868,0.428292,
  0.185732,0.381393,0.420401,
  0.162097,0.317877,0.439591,
  0.131579,0.190525,0.436619,
  0.167868,0.118892,0.461776,
  0.27945,0.11651,0.451459,
  0.377462,0.11307,0.476639,
  0.492268,0.0933758,0.525851,
  0.424913,0.0558123,0.579071,
  0.351827,0.0430748,0.595254,
  0.366193,0.0130768,0.625887,
  0.487611,0.0245813,0.614436,
  0.476868,0.0509271,0.616072,
  0.488269,0.0884108,0.62005,
  0.589556,0.113849,0.665474,
  0.552321,0.141984,0.666937,
  0.62016,0.153296,0.70393,
  0.749212,0.221811,0.790262,
  0.765657,0.256397,0.822697,
  0.769392,0.334293,0.861209,
  0.655835,0.377082,0.859691,
  0.533565,0.435238,0.868523,
  0.550946,0.520618,0.857415,
  0.546007,0.558721,0.82185,
  0.629225,0.579153,0.811316,
  0.676815,0.568963,0.759367,
  0.693262,0.597888,0.740507,
  0.647713,0.599077,0.721283,
  0.60579,0.586912,0.70209,
  0.569818,0.571169,0.721148,
  0.539465,0.569831,0.705153,
  0.491172,0.485717,0.67017,
  0.513176,0.498196,0.676459,
  0.5552,0.508156,0.698829,
  0.619893,0.521478,0.736142,
  0.651401,0.549743,0.7826,
  0.670429,0.527991,0.812073,
  0.551933,0.498779,0.829482,
  0.473599,0.467083,0.836872,
  0.465372,0.504741,0.877063,
  0.410847,0.539339,0.849029,
  0.383544,0.495288,0.862485,
  0.349358,0.327436,0.836563,
  0.312521,0.394135,0.834657,
  0.268744,0.392553,0.849912,
  0.189528,0.324437,0.823292,
  0.110905,0.186918,0.810953,
};

double const os_opacity [2] =
{
 0,
 1,
};

#include <algorithm>
#include <numeric>
#include <iterator>
int TestVolumeRayCastMapperWithOcclusionSpectrum (int argc, char** argv)
{
  vsp(Renderer,ren);
  vsp(RenderWindow,win);
  vsp(RenderWindowInteractor,ict);
    win->AddRenderer(ren);
    win->SetInteractor(ict);
    ict->SetRenderWindow(win);

    ren->SetBackground(.2,.2,.2);
    // win->FullScreenOn();
    ict->SetInteractorStyle(vsptype(InteractorStyleTrackballCamera)::New());

  // Volume center and bounds
  double center [3] = {0};
  double bounds [6] = {0};

  // Assembly to glue volume and its outline together
  vsp(Assembly,assembly);
  ren->AddActor(assembly);

  // Volume reader
  char* fname = 0;
  vsp(ImageReader2,reader);
    fname = vtkTestUtilities::ExpandDataFileName(argc,argv,"Data/engine.img");
    reader->SetFileName(fname);
    reader->SetDataByteOrderToLittleEndian();
    reader->SetFileDimensionality(3);
    reader->SetDataOrigin(0,0,0);
    reader->SetDataSpacing(.1,.1,.1);
    reader->SetDataExtent(0,255,0,255,0,109);
    reader->SetDataScalarTypeToUnsignedChar();
    reader->SetNumberOfScalarComponents(1);
    reader->FileLowerLeftOn();
    reader->Update();
    delete [] fname; fname = 0;

    reader->GetOutput()->GetBounds(bounds);
    reader->GetOutput()->GetCenter(center);
  assembly->AddPosition(-center[0],-center[1],-center[2]);

  // Volume renderer
  {
  vsp(VolumeRayCastMapper,mapper);
  vsp(Volume,actor);

  mapper->SetInputConnection(reader->GetOutputPort());
  actor->SetMapper(mapper);
  assembly->AddPart(actor);
  mapper->SetVolumeRayCastFunction(vsptype(VolumeRayCastCompositeFunction)::New());

  mapper->SetSampleDistance(.1);

  // {
  // vsp(ImageOcclusionSpectrum,osfilter);
  // osfilter->SetInputConnection(reader->GetOutputPort());
  // osfilter->SetRadius(1);
  // osfilter->Update();

  // fname = vtkTestUtilities::ExpandDataFileName(argc,argv,"Data/engine.os");
  // vtkstd::ofstream ofs(fname, vtkstd::ios::binary);
  // if (!ofs)
  //   {
  //   return 1;
  //   }
  // delete [] fname; fname = 0;
  // ofs.write((char const*)osfilter->GetOutput()->GetScalarPointer(),
  //           256*256*110*sizeof(double));
  // }

  // Occlusion Spectrum reader
  vsp(ImageReader2,os);
    fname = vtkTestUtilities::ExpandDataFileName(argc,argv,"Data/engine.os");
    os->SetFileName(fname);
    os->SetDataByteOrderToLittleEndian();
    os->SetFileDimensionality(3);
    os->SetDataOrigin(0,0,0);
    os->SetDataSpacing(.1,.1,.1);
    os->SetDataExtent(0,255,0,255,0,109);
    os->SetDataScalarTypeToDouble();
    os->SetNumberOfScalarComponents(1);
    os->FileLowerLeftOn();
    os->Update();
    delete [] fname; fname = 0;
  mapper->SetOcclusionSpectrum(os->GetOutput());

  double const* data = (double*)os->GetOutput()->GetScalarPointer();
  size_t const  num  = 256*256*110;
  cout << std::accumulate(data,data+num,0.0)/num << endl;
  cout <<*std::max_element(data,data+num) << endl;

  vtkVolumeProperty* property = actor->GetProperty();
  property->SetShade(0);
  property->SetScalarOpacityUnitDistance(.1);
  property->SetInterpolationTypeToLinear();

  // Scalar color transfer function
  vsp(ColorTransferFunction,ctf);
  for (int i = 0; i != 256; ++i)
    {
    ctf->AddRGBPoint(i,color[i][0],color[i][1],color[i][2]);
    }
  property->SetColor(ctf);

  // Scalar opacity transfer function
  vsp(PiecewiseFunction,sotf);
  for (int i = 0; i != 256; ++i)
    {
    sotf->AddPoint(i, (opacity[i][0]+opacity[i][1]+opacity[i][2])/3);
    }
  property->SetScalarOpacity(sotf);

  // Occlusion Spectrum transfer function
  vsp(PiecewiseFunction,ostf);
  // for (int i = 0; i != 256; ++i)
  //   {
  //   ostf->AddPoint(i, os_opacity[i]);
  //   // ostf->AddPoint(i, i);
  //   }
  ostf->AddPoint(0,0);
  ostf->AddPoint(30,1);
  property->SetOcclusionSpectrumOpacity(ostf);
  }

  // Outline
  {
  vsp(OutlineFilter,outline);
  vsp(PolyDataMapper,mapper);
  vsp(LODActor,actor);

  outline->SetInputConnection(reader->GetOutputPort());
  mapper->SetInputConnection(outline->GetOutputPort());
  actor->SetMapper(mapper);
  assembly->AddPart(actor);

  actor->GetProperty()->SetColor(1, 1, 1);
  }

  // Axes
  {
  vsp(AxesActor,axes);
  ren->AddActor(axes);

  axes->AxisLabelsOff();
  axes->SetTotalLength(.6 * (bounds[1]-bounds[0]),
                       .6 * (bounds[3]-bounds[2]),
                       .6 * (bounds[5]-bounds[4]));
  axes->SetNormalizedTipLength(.2, .2, .2);
  axes->SetConeRadius(.15);
  axes->SetNormalizedShaftLength(.8, .8, .8);
  axes->SetShaftTypeToCylinder();
  axes->SetCylinderRadius(.01);
  }

  ict->Initialize();
  ict->Start();

  return 0;
}
